{"name":"Pisensors","tagline":"A web app that displays sensors output from Raspberry Pi","body":"PiSensors\r\n=========\r\nWhat's the temperature in my room? Do I need to water my plants? Ihave a Raspberry Pi with several sensors connected to it, it's not hard to answer these questions. SSH to your Pi, run a Python script you wrote before and then I can get the data. The problem here is, however, how to access them easily? A web app is a good candidate for this purpose.\r\n\r\n[Github repository](https://github.com/tylerwowen/pisensors).\r\n\r\n## Overview\r\n----------\r\nThe basic idea is that to create a web app that shows the data from different sensors. The data can be either cached or just updated. The information is presented in a table, with an `Update` button at the end of each row. Once `Update` is clicked, the frontend makes an API call so the backend activates the sensor and sends back the date.\r\n\r\n## Setup\r\n--------\r\nI chose *Node.js* with *Express.js* framework as my backend. For frontend, apart from *HTML*, *Javascript* and *CSS*, I also used *Jade* to generate pages.\r\n\r\n### Installation\r\n  * Install Node.js + npm  \r\n  `sudo apt-get install node`\r\n  * Choose a proper directory and clone my [git repo](https://github.com/tylerwowen/pisensors)\r\n    ```sh\r\n    cd somewhere/\r\n    git clone https://github.com/tylerwowen/pisensors\r\n    cd pisensors\r\n    npm install\r\n    ```\r\n\r\n    `npm install` will install all required dependencies that are defined in package.json\r\n\r\n  * I include a python script that reads from `DHT 11 Temperature and Humidity` sensor. Change permission of `temphum.py` if you see any thing like: `sudo: ./scripts/temphum.py: command not found`\r\n    ```sh\r\n    chmod 755 pisensor/scripts/temphum.py\r\n    ```  \r\n\r\nAfter the above steps, the layout should be like this:\r\n```\r\n├── app.js\r\n├── bin\r\n│   └── www\r\n├── node_modules\r\n│   ├── body-parser\r\n│   ├── debug\r\n│   ├── express\r\n│   ├── jade\r\n|   └── morgan\r\n├── package.json\r\n├── public\r\n│   ├── images\r\n│   ├── javascripts\r\n│   └── stylesheets\r\n│       └── style.css\r\n├── routes\r\n│   ├── cache\r\n│       └── cache.json\r\n│   ├── objects\r\n│       ├── humidity.js\r\n│       ├── sensor.js\r\n│       ├── temperature.js\r\n│       └── vibration.js\r\n│   ├── index.js\r\n│   └── users.js\r\n├── scripts\r\n|   └── temphum.py\r\n└── views\r\n|    ├── error.jade\r\n|    ├── index.jade\r\n|    └── layout.jade\r\n```\r\n### Configuration\r\n\r\n#### Dependencies\r\n  * To run /scripts/temphum.py, you need to install the Adtruit_DHT library.\r\n    ```bash\r\n    sudo apt-get update\r\n    sudo apt-get install build-essential python-dev\r\n    git clone https://github.com/adafruit/Adafruit_Python_DHT.git dhtlib\r\n    cd dhtlib\r\n    sudo python setup.py install\r\n    cd .. && sudo rm -r dhtlib\r\n    ```\r\n  * If you have other sensors instead, you should also place your scripts/programs under this directory\r\n\r\n#### Add New Sensors\r\n  * In /routes/objects, create a subclass of sensors.js. For example, create a light.js\r\n    ```javascript\r\n    var Sensor = require('./sensor.js');\r\n\r\n    function Light(sensor, value, unit) {\r\n        Sensor.call(this, sensor, value, unit);\r\n    }\r\n\r\n    Light.prototype = new Sensor();\r\n\r\n    Light.prototype.fetchDataFromSensor = function(callback) {\r\n        var cmd = 'sudo ./scripts/light.py'; // You need to write this script\r\n        Sensor.prototype.fetchDataFromSensor.call(this, cmd, callback);\r\n    };\r\n\r\n    Light.prototype.fetchDataFromCache = function(cachedData) {\r\n        var JSONData = cachedData.light;\r\n        Sensor.prototype.fetchDataFromCache.call(this, JSONData);\r\n    };\r\n\r\n    module.exports = Light;\r\n    ```\r\n  * In /routes/index.js\r\n    * Add `litsSensor = require('./objects/light.js');` under `var vibSensor = require('./objects/vibration.js');`\r\n    * Add `var lightSensor = new litSensor(\"Light\", \"False\", \"Boolean\");` under `var vibrationSensor = new vibSensor(\"Vibration\", \"False\", \"Boolean\");`\r\n    * Add `data.push(lightSensor);` under `data.push(vibrationSensor);`\r\n  * In /routes/cahe/cache.json\r\n\r\n## Implementation\r\n------------------\r\n### /routes/index.js\r\nThis file is the core of this web application. It has two responsibilities (I know this violates the Single Responsibility Principle, but I will explain):\r\n  * Generates the contents of index page\r\n  * Responses to API calls\r\n\r\n### /routes/objects/Sensor.js\r\n## Outcome\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}